#include "virtualplayer.h"

#include <QVector>
#include <QFuture>
#include <QtConcurrent>

const QVector<QVector<double>> t1 = {
    {0.3676461363889609,0.4967420792112414,-0.7199093911984394,12.39626384399281,-2.3467093863923,-9.244340348553697,-1.665826120969002,10.53368153409246,-3.185849849436278,0.7695327155868154},
    {1.60943698622091,0.3483757033452727,0.8375881361391267,-0.09346829843458695,-6.130819470896965,-6.477573369922222,10.34865719518361,3.842745577956052,1.137859654401337,-0.297301723728818},
    {1.310054645782639,9.473337546365295,-1.181497896473642,-2.729641113513361,-0.2332843892454713,9.215570656392254,-0.5928528119687496,-0.2065840128684702,-1.124433540099315,7.807279861612548},
    {2.171272833066347,1.732302573444987,-3.009283118009238,-0.2437089297787369,6.864472518060083,9.778405800728919,1.021706756031511,-5.272518356447293,-0.6111937376326154,-4.069070189145783},
    {5.104154590080915,-0.245915786412561,14.22436784263445,-0.4781929703500923,2.946836987045216,-8.892768085906617,0.9500332341959536,-0.7553024257988322,14.14076666468701,0.4867463883775999},
    {5.429979949563454,-2.126417869590848,15.10776829498596,-2.55786998002927,-2.638306974413827,-7.890589085166531,-0.5234030136334769,0.2948813531853858,-4.967110105160418,0.9933866705215951},
    {-6.632123512597345,2.457273206046366,-8.66346692097928,0.2625691280935314,0.5079823443314695,-0.05729391842107989,0.6338887961220916,3.112511427598228,7.992351153862881,0.5868576043849529},
    {-8.373753448197206,-0.1311443709396554,1.613822266382651,0.2767136918810522,-2.065515817942683,11.54051569552261,-2.785481113939118,10.68696045147764,9.334758118406992,-6.409003360297709},
    {0.9612801605020269,-2.07890905840393,-2.367716703384003,-3.781555133605575,10.76445498105517,-9.085694925854929,10.10684922431337,2.562440246141195,0.03283481856769702,-1.552162387484811},
    {1.808326378345129,-12.20630194412751,3.384953067690889,-0.87386391882415,4.567169897621832,3.725937165649751,-0.9978690433555636,-0.5475076885886663,0.3671037042649014,12.22868289971035},
    {2.027428535840047,-1.367420633387035,-0.579237536851321,8.431131056274165,-0.9340269073941536,-11.50297833034248,-0.9105112285704235,9.220978780847993,0.8134764527722577,-0.8683839276452828},
    {7.360942667715952,-0.9408657935611388,-2.031828198273593,4.842373964507555,-0.08103957029523086,-9.14377536817415,3.054728022634612,-3.469326947039071,1.450882730866359,5.867669173429915},
    {2.217421827468546,12.55770917534958,0.7444564952972513,1.263834062839727,1.785845601992742,5.728579797903352,-2.630748869146712,-7.717655792404027,3.50369846710657,6.067966708725761},
    {3.074089566964327,12.02250105829749,-0.9596965661154745,4.071085272018717,-1.970903660489152,6.044979984366186,-0.5455500777341694,-1.195312272656457,-0.5832384176285403,10.22235753799297},
    {3.883905938705532,-7.313717540993138,3.763745328095609,5.21916081170733,4.493929288520073,3.689992826691915,0.5285359649991799,1.616428895830613,5.170616146296386,0.3229310725058764},
    {7.320706801259199,0.2151662388791771,2.726240459861585,-2.291526304122623,-6.182913422588877,6.101971123334327,12.97064588655917,-0.7528465112894764,2.145076088000183,-3.144076152713516},
    {0.8872487985617551,5.619784459024722,3.148222088084293,-3.040547304259536,0.9126088679716321,12.61626536472425,1.403761485687535,4.924384377376178,-1.234337321969757,4.791602714022337},
    {-6.936452512350847,-9.256089719795515,-0.779494790696269,2.371908148980896,-0.3307061604241175,-6.664634726084676,1.944788986297036,1.477912298699583,1.946560624959969,-14.37528049942883},
    {-2.649610014850653,0.1609904641265589,0.4900746446257418,7.646008114865441,2.54807028935199,10.83445248305008,-0.5022571008775869,-11.32567333481984,3.156334516631695,-0.4471818682623429},
    {-6.043253712071226,0.6736400311791332,-1.010129643230674,4.203442685190288,7.137140819780209,-5.035294881803098,13.789957292627,-1.754969846949859,-1.171329671055746,-1.372766072336167}
};

const QVector<QVector<double>> t2 = {
    {-10.89731833850047,1.136521510819719,-6.533150507026796,-13.9165360746306,-9.779502423417691,3.899670460653835,-10.8840138854694,-1.858129159291011,-7.240911494725762,0.6688222287098706,20.44949555180841,2.759190874019403,-2.981787610257532,-4.152979316574054,-12.13023348154294,2.635526262568533,1.110119003988524,2.473020991004196,10.69522441247648,-1.770737287416535,-1.042719528091621},
    {-9.781587718993462,-1.292039786949763,3.557756165989034,-8.352948086745377,9.223636563730247,-25.65804382108363,-5.851542023551868,20.60723383386514,5.27517318750215,5.00915720113691,1.658161976998984,6.751245964603005,8.28534673414697,5.195932799462064,-5.415675713734413,-9.731766326124673,-0.8714430449180551,-12.09859070241575,-16.24714778440946,0.4066393504066173,0.04391945077152368},
    {-5.716593840704354,-10.71570674789675,-9.124478857591695,6.364437423569162,-4.511579615346682,17.22144418275474,-9.872046488107848,-4.198594652328976,-1.200907658730842,16.29803331336105,3.376440883676477,-16.21997935899035,-3.270703064503852,-8.228246703339691,-1.728314425069517,-8.476271848062892,9.752000622348243,6.575937500700428,-5.960820505371342,-13.48155898556618,-4.767842828410545},
    {-14.55681670004235,10.94488917480698,15.96390207795112,-3.058620817048753,-2.203973978231491,8.504282318966006,-9.742006031463232,-7.371184260991156,6.012459758952339,-8.839743115500458,-7.099976805548656,0.6312935137345265,6.757588535424914,-7.358990286533424,-1.894029811087514,-5.339954262232114,9.649550782685242,-2.468443876729421,-16.38603698310585,4.097806562167541,-18.56455133716435},
    {1.095859212518972,-4.054564997279209,-1.150142200472704,-1.974062624418124,-3.418133077153108,-2.089980052964732,4.585430089079956,0.05133706094875962,-3.924396751093905,-2.644016677253612,-4.882264549460441,-1.233273180298285,5.86008199294458,-1.537430906897622,-3.475680347340722,-7.750014637354136,-7.370593914231635,-5.271646097618607,4.930248165279195,-4.135627105775893,0.9041469352236667},
    {-7.62289243891094,10.00740451682042,-18.98443564296179,1.322243948337644,-9.265676238018754,5.726978217751507,-11.58176242555236,-7.242092954874778,10.34233081404347,-11.59877932006902,4.570740238712699,7.515289118626322,-14.24393327737424,12.7972604412134,-2.75198640944627,7.331396259689158,-14.94619030528543,-0.08643312815490253,-4.326108602146544,-0.9872080401430193,-4.839856228795924},
    {-8.924508885531617,-16.53704212747777,-1.260687991595596,1.582069050130158,1.740596484138228,10.60096196396815,-0.9167033418575857,-11.17689212538641,-15.16134431137297,-7.534290002622085,-2.496012871728093,-14.84095901362708,-0.3784293556478817,-3.055088595780806,7.731663956340782,0.9633722729676745,-1.819227854036339,-13.45886473049752,-15.11708500182388,19.46387128063598,9.694749284899405},
    {-14.18103781610169,11.30731046843664,4.102367176938695,-2.480585576500243,11.7008619008372,-21.89425975821535,16.78934248807803,-8.982598935828083,-17.14307671505566,-4.616334299263163,-1.825796835941831,-7.729241364889721,-7.668566392727085,-9.753611290766525,10.50613504252647,1.50774602265684,-9.310106438812284,13.28198830121652,-5.780536202866994,-4.387831360610498,4.046920936844312},
    {-7.137275584305341,1.283839187431586,-0.8579525894415634,-15.93420303533233,5.761020797841612,3.655837068403887,-4.098083477937939,-2.694524179040495,-0.2802909740809827,1.498577680903011,-19.19398622534707,3.401175228883323,-13.39687196113894,3.682174698570372,-7.044800681574936,-0.5630039969680811,3.949966873975425,1.206766842687001,9.215194841657837,7.079517566057101,3.960574622900832}
};

const double BIAS_VALUE      = 1.00;
const int    EMPTY_SPACE     = -1;
const int    POSITIVE_RESULT = 1;
const int    V_USER_MARK     = 0;

QSharedPointer<virtualPlayer> virtualPlayer::mInstance = nullptr;

///
/// \brief virtualPlayer::singleInstance Returns a pointer to this class singleton instance
///
/// Miguel Mota
/// Jan 5 2021
///
/// \return Singleton instance pointer
///
QSharedPointer<virtualPlayer> virtualPlayer::singleInstance()
{
    if(mInstance==nullptr){
        mInstance = QSharedPointer<virtualPlayer>(new virtualPlayer());
        qDebug() << "virtual player singleton instance created...";
    }

    return mInstance;
}

///
/// \brief virtualPlayer::multiplyVectors Matrix multiplication helper. Multiplies all the values in the vectors
/// and acumulates the results.
///
/// Miguel Mota
/// Jan 5 2021
///
/// \param v1 Vector 1
/// \param v2 Vectro 2
///
/// \return The sum of all corresponding vector items multiplied.
///
double virtualPlayer::multiplyVectors(const QVector<double> &v1, const QVector<double> &v2)
{
    double retVal = 0.00;

    // just to make sure we check the size...
    if(v1.size()==v2.size()){
        int index=0;
        for(const int val1 : v1){
            retVal+=val1*v2[index++];
        }
    }

    return retVal;
}

///
/// \brief virtualPlayer::getLayer Calculates specific layer in the neural network
///
/// Miguel Mota
/// Jan 5 2021
///
/// \param input Input values for the layer
/// \param t Theta values
/// \param addBias Specifies if a bias element must be added to the input
///
/// \return The values for each node in the layer.
///
QVector<double> virtualPlayer::getLayer(const QVector<double> input,
                                        const QVector<QVector<double>> t,
                                        const bool addBias) const
{
    QVector<double> retVal;
    const int concurrentThreds = QThread::idealThreadCount(); // WARNING!!! assuming it never returns 0!
    qDebug() << "Ideal threads count : " << concurrentThreds;

    if(addBias)
        retVal.append(BIAS_VALUE); // add bias...

    // Matrix multiplication
    for(int i=0; i<t.size(); i++){
        // Start multiplying, using as many threads as we have available
        // for for row*col multiplications...
        QFuture<double> futures[concurrentThreds];
        for(int j=0;j<concurrentThreds;j++){
            futures[j] = QtConcurrent::run(multiplyVectors, t[i], input);
        }

        // Collect results
        double tmp = 0.00;
        for(int j=0;j<concurrentThreds;j++){
            tmp+=futures[j].result();
        }
        retVal.push_back(g(tmp));
    }

    return retVal;
}

///
/// \brief virtualPlayer::makeYourNextMove Calculates the next more using the neural network
///
/// Miguek Mota
/// Jan 5 2021
///
/// \param board Current board elements.
///
void virtualPlayer::makeYourNextMove(QVector<QVector<int>> &board)
{
    QVector<double> input;
    input.push_back(BIAS_VALUE); // add bias...

    // Convert the current items in the board
    // into the input layer for the neural network...
    for(const QVector<int> &row : board){
        for(const int &value : row){
            input.append(static_cast<double>(value));
        }
    }

    // Make neurons think!
    QVector<double> layer1 = getLayer(input, t1, true);
    QVector<double> output = getLayer(layer1, t2, false);

    // Check if we have a result...
    int outputIndex=0;
    for(QVector<int> &row : board){
        for(int &value : row){
            if(static_cast<int>(qRound(output[outputIndex++]))==POSITIVE_RESULT && value==EMPTY_SPACE){
                // Make the move!
                value=V_USER_MARK;
                return;
            }
        }
    }

    qDebug() << "Neurons collapsed!";

    // If we are here neurons collapsed! just find the next available space.
    // so they know we are alive...
    for(QVector<int> &row : board){
        for(int &value : row){
            if(value==EMPTY_SPACE){
                value=V_USER_MARK;
                return;
            }
        }
    }
}
